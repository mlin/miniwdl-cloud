name: test-aws

on:
  push:
    branches:
      - test-aws
      - wip-aws
  pull_request:
    branches:
      - test-aws
      - wip-aws

jobs:
  swarm:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      _AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      _AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_SDK_LOAD_CONFIG: 1
      AWS_PROFILE: aws-test
      TERRAFORM_ARGS: -auto-approve -var=miniwdl_branch=stress-test -var=owner_tag=mlin@contractor.chanzuckerberg.com -var=s3bucket=czi.miniwdl-test

    steps:
    - uses: actions/checkout@v2

    - name: set GIT_REVISION
      run: echo "::set-env name=GIT_REVISION::$(git describe --tags --long --dirty --always)"

    - name: generate AWS credentials files
      # Memorializing roadbumps getting our IAM role to work:
      # 1. We don't use the official AWS Credentials Action because it needs the TagSession power
      # 2. If AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY env vars are defined as such, then boto3
      #    doesn't look in ~/.aws at all; so we prefixed them with underscores above.
      run: |
        mkdir -p ~/.aws
        echo -e "[default]\nregion = us-west-2\n[profile aws-test]\nrole_arn = ${AWS_ROLE_TO_ASSUME}\nsource_profile = default" > ~/.aws/config
        echo -e "[default]\naws_access_key_id = ${_AWS_ACCESS_KEY_ID}\naws_secret_access_key = ${_AWS_SECRET_ACCESS_KEY}" > ~/.aws/credentials

    - name: verify working AWS credentials
      run: aws s3 ls s3://czi.miniwdl-test/

    - name: generate SSH key
      run: ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""

    - name: terraform init
      run: terraform init terraform/aws/swarm

    - name: terraform apply
      run: eval `ssh-agent` && ssh-add && terraform apply $TERRAFORM_ARGS -var=name_tag_prefix=miniwdl-test-${GIT_REVISION} terraform/aws/swarm

    - name: set MANAGER_IP
      run: echo "::set-env name=MANAGER_IP::$(terraform output manager_ip)"

    - name: miniwdl run_self_test
      run: ssh wdler@${MANAGER_IP} miniwdl run_self_test --dir /mnt/shared/runs

    - name: test_containment.sh
      run: |
        scp test/test_containment.sh wdler@${MANAGER_IP}:/home/wdler/
        ssh wdler@${MANAGER_IP} /bin/bash /home/wdler/test_containment.sh

    - name: DeepVariant_GLnexus
      run: |
        ssh wdler@${MANAGER_IP} miniwdl run \
          https://raw.githubusercontent.com/mlin/DeepVariant-GLnexus-WDL/master/test/range1KGP.wdl \
          -i https://raw.githubusercontent.com/mlin/DeepVariant-GLnexus-WDL/master/test/range1KGP.test26.ALDH2.json \
          --dir /mnt/shared/runs/${GIT_REVISION}/.

    - name: S3 writeback
      run: |
        ssh wdler@${MANAGER_IP} fsx_to_s3 -h || true
        ssh wdler@${MANAGER_IP} fsx_to_s3 /mnt/shared/runs/${GIT_REVISION}/
        aws s3 ls --recursive s3://czi.miniwdl-test/runs/${GIT_REVISION}/output_links
        aws s3 cp s3://czi.miniwdl-test/runs/${GIT_REVISION}/outputs.json -

    - name: worker sentinel files
      run: |
        date
        ssh wdler@${MANAGER_IP} tree -aD /mnt/shared/.swarm
        ssh wdler@${MANAGER_IP} find /mnt/shared/.swarm/workers -type f | grep -c .

    - name: S3 cleanup
      if: always()
      run: aws s3 rm --recursive s3://czi.miniwdl-test/runs/${GIT_REVISION}/

    - name: terraform destroy
      if: always()
      run: terraform destroy $TERRAFORM_ARGS -var=name_tag_prefix=miniwdl-test-$(git describe --tags --long --dirty --always) terraform/aws/swarm
